import PO from 'pofile';
import stringify from 'json-stable-stringify';

/**
 * Lokalise has limitations to their PO file support that we must workaround:
 *
 * 1. Make sorting case sensitive (there's a separate sorting bug as well)
 * 2. Flag messages where msgids contains '%' as 'python-format'
 * 3. Treat the extractedComments (#.) as just comments (#).
 * 4. Remove plural-forms header property if it is empty.
 *
 * These adjustments make the output PO files nearly identical, format-wise,
 * with the PO files generated by Django's makemessages.
 */
export function formatPO(content: string): string {
  const parsed = PO.parse(content);
  // sort alphabetically by msgid
  parsed.items.sort((a, b) => (a.msgid < b.msgid ? -1 : a.msgid > b.msgid ? 1 : 0));

  if (parsed.headers['Plural-Forms'] === '') {
    delete parsed.headers['Plural-Forms'];
  }

  for (const item of parsed.items) {
    item.comments = item.extractedComments;
    item.extractedComments = [];
    if (item.msgid.includes('%')) {
      item.flags['python-format'] = true;
    }
  }

  return parsed.toString();
}

/**
 * TODO: Lokalise fixes their sort + spacing bug use the same stringify package as FormatJS
 * json-stable-stringify provides consistent key sorting and formatting
 */
export function formatStructuredJson(content: string): string {
  const parsed = JSON.parse(content);
  for (const key in parsed) {
    const description = parsed[key]['notes'];
    if (description === '') {
      delete parsed[key]['notes'];
    }
  }
  return stringify(parsed, { space: 2 });
}

export function formatJson(content: string): string {
  const parsed = JSON.parse(content);
  return stringify(parsed, { space: 2 });
}
